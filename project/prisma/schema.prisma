generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["emergency_project"]
}

model User {
  id                String             @id @default(uuid())
  email             String             @unique
  phone             String?
  firstName         String
  lastName          String
  role              UserRole           @default(PATIENT)
  status            UserStatus         @default(ACTIVE)
  profileImageUrl   String?
  supabaseUserId    String?            @unique
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  organizationId    String?
  password          String?
  medicalInfo       Json?              // ตัวอย่าง: { "conditions": ["asthma"], "allergies": ["penicillin"] }
  emergencyRequests EmergencyRequest[] @relation("PatientRequests")
  notifications     Notification[]
  organization      Organization?      @relation(fields: [organizationId], references: [id])

  @@map("users")
  @@schema("emergency_project")
}

model Organization {
  id                 String              @id @default(uuid())
  name               String
  type               String
  address            String
  city               String
  state              String?
  postalCode         String
  latitude           Float?
  longitude          Float?
  location           Json?               // เพิ่มฟิลด์ location เพื่อเก็บ { "address": "...", "coordinates": { "lat": ..., "lng": ... } }
  contactPhone       String
  contactEmail       String?
  status             String              @default("ACTIVE")
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  emergencyResponses EmergencyResponse[]
  users              User[]
  medicalInfo        Json?

  @@map("organizations")
  @@schema("emergency_project")
}

enum EmergencyStatus {
  PENDING
  ASSIGNED
  IN_PROGRESS
  COMPLETED
  CANCELLED

  @@schema("emergency_project")
}

model EmergencyRequest {
  id                String              @id @default(uuid())
  title             String?             // เพิ่ม: ชื่อเคส เช่น "Car Accident on Highway 7"
  status            EmergencyStatus     @default(PENDING)
  severity          Int?                // เพิ่ม: ระดับความรุนแรง (1-4)
  emergencyType     String?             // เพิ่ม: ประเภทเหตุฉุกเฉิน เช่น "Car Accident"
  description       String
  symptoms          String[]            // เพิ่ม: อาการ เช่น ["Chest Pain", "Bleeding"]
  location          Json?               // เปลี่ยน: เก็บ { "address": "Highway 7", "coordinates": { "lat": 13.9876, "lng": 100.5432 } }
  latitude          Float?              // เก็บสำเนาเพื่อให้ query ง่ายขึ้น
  longitude         Float?              // เก็บสำเนาเพื่อให้ query ง่ายขึ้น
  medicalInfo       Json?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  patientId         String
  patient           User                @relation("PatientRequests", fields: [patientId], references: [id])
  responses         EmergencyResponse[]
  notifications     Notification[]      // เพิ่ม: ความสัมพันธ์กับการแจ้งเตือน

  @@map("emergency_requests")
  @@schema("emergency_project")
}

model EmergencyResponse {
  id                 String           @id @default(uuid())
  status             String
  notes              String?
  assignedAt         DateTime?        // เปลี่ยนจาก dispatchTime เป็น assignedAt
  arrivalTime        DateTime?
  completionTime     DateTime?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  organizationId     String
  emergencyRequestId String
  emergencyRequest   EmergencyRequest @relation(fields: [emergencyRequestId], references: [id])
  organization       Organization     @relation(fields: [organizationId], references: [id])

  @@map("emergency_responses")
  @@schema("emergency_project")
}

model Notification {
  id                 String           @id @default(uuid())
  type               String
  title              String
  body               String
  isRead             Boolean          @default(false)
  metadata           Json?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  userId             String
  user               User             @relation(fields: [userId], references: [id])
  emergencyRequestId String?          // เพิ่ม: เชื่อมโยงกับเคสฉุกเฉิน
  emergencyRequest   EmergencyRequest? @relation(fields: [emergencyRequestId], references: [id])

  @@map("notifications")
  @@schema("emergency_project")
}

enum UserRole {
  PATIENT
  EMERGENCY_CENTER
  HOSPITAL
  RESCUE_TEAM
  ADMIN

  @@schema("emergency_project")
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED

  @@schema("emergency_project")
}